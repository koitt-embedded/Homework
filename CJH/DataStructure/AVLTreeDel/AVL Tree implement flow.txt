* 삭제 구현

*자연어

삭제 할 어떤 값이 현재 트리에 있는지 찾는다.
찾는 과정에서 노드를 거칠 때마다 거친 노드들을 스택에 담는다.
삭제 할 노드를 찾았다면 그 노드를 대체 할 값을 좌 또는 우 서브 트리에서 찾는다.
대체 할 노드는 좌측 서브 트리 일 경우 최댓값(서브트리의 노드들의 거듭된 우측 자손 끝 값)
우측 서브 트리 일 경우 최솟값이다.
대체 할 노드를 찾았다면,
그리고 대체 할 노드가 삭제할 노드의 좌측 서브 트리에서 찾은 것이라면
우측 자식 노드는 없을 것이므로(이미 자신이 우측 최하단 노드이기 때문)
좌측 자식 노드가 있는지를 확인하여 자신의 부모 노드와 자식 노드를 연결한다. (대체할 노드가 사라진 공백 메우기)
대체 할 노드가 삭제될 노드로 이동 했으므로 해당 노드는 해제한다.
삭제 할 노드에 대체할 노드의 데이터를 복사하고 삭제 과정을 종료한다.

*처리과정

1. 데이터를 입력 받아 삭제할 노드를 찾는다.
1.1 루트부터 시작하여 삭제 할 데이터를 갖고 있는 노드를 찾는다.
1.2 루트부터 삭제할 노드를 경유하여 대체할 노드의 자식 노드까지 스택에 쌓는다.

2. 삭제할 노드를 대체할 노드를 찾고 대체할 노드를 가리키는 부모와 이 노드의 자식 노드를 연결한다.
2.1 삭제할 노드를 찾았다면 이 노드의 좌우측 서브 트리 중 하나를 선택하여 대체 할 노드를 찾는다.
좌측 서브트의 경우)
2.2 대체할 노드가 이 서브 트리에서 최댓값이여야 이진 트리의 조건을 유지할 수 있으므로
이 서브트리의 값 중 최댓값인 최우측하단 노드를 노드를 이동하며 찾는다.
2.3 해당 노드를 찾았다면, 이 노드의 데이터가 이동되어 삭제될 노드의 데이터에 복사되고, 이 필요 없는 노드는 삭제되야 하므로 이 노드의 부모 노드가 이 노드의 자식 노드를 가리키게 해야 한다.
2.3.1 이 노드는 우측 자식이 없으므로 좌측 자식이 있는지 확인한다.
2.3.2 좌측 자식이 있다면 이 노드의 부모 노드의 우측 링크가 이 노드의 자식 노드를 가리키게 한다.
2.3.3 좌측 자식이 없다면 부모 노드의 우측 링크는 NULL이다.

3. 삭제할 노드에 값을 갱신한다.
3.1 대체할 노드로부터 받은 데이터 값을 삭제할 노드의 데이터에 복사하고 종료한다.

4. 스택에 쌓인 값들을 갱신한다.
4.1 스택에 쌓인 노드들은 노드 삭제 과정과 연관된 노드들이므로 스택의 최상단 노드부터 높이를 재설정 한다.